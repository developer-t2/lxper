{"version":3,"sources":["config/theme.js","redux/reducers/auth.js","redux/reducers/index.js","redux/sagas/auth.js","redux/sagas/index.js","redux/store.js","components/Login.js","routes/index.js","App.js","index.js","redux/types.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","require","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","initialState","isLoading","token","isAuth","auth","state","action","type","localStorage","setItem","data","jwt","rootReducer","history","combineReducers","router","connectRouter","login","watchLogin","loginAPI","userID","a","axios","post","result","config","headers","Auth","console","get","log","call","put","response","takeLatest","all","fork","rootSaga","dotenv","defaults","baseURL","process","withCredentials","createBrowserHistory","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","store","createStore","applyMiddleware","run","Login","dispatch","useDispatch","useSelector","useState","userId","setUserId","onChange","useCallback","e","target","value","onClick","Dialog","open","maxWidth","fullWidth","DialogTitle","disableTypography","Typography","variant","DialogContent","TextField","label","size","autoFocus","DialogActions","Button","color","memo","RootRouter","App","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.ac7f2075.chunk.js","sourcesContent":["import { red } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#2196f3',\r\n    },\r\n    secondary: {\r\n      main: '#f50057',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: '#fff',\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","const { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE } = require('../types');\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  token: '',\r\n  isAuth: false,\r\n  error: null,\r\n};\r\n\r\nconst auth = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOGIN_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case LOGIN_SUCCESS:\r\n      localStorage.setItem('token', action.data.jwt);\r\n\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        token: action.data.jwt,\r\n        isAuth: true,\r\n      };\r\n    case LOGIN_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default auth;\r\n","import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport auth from './auth';\r\n\r\nconst rootReducer = (history) => {\r\n  return combineReducers({\r\n    router: connectRouter(history),\r\n    auth,\r\n  });\r\n};\r\n\r\nexport default rootReducer;\r\n","import axios from 'axios';\r\nimport { all, call, fork, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS } from '../types';\r\n\r\n// login\r\nconst loginAPI = async (userID) => {\r\n  const result = await axios.post(`auth/${userID}`);\r\n\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Auth: result.data.jwt,\r\n    },\r\n  };\r\n\r\n  console.log(await axios.get('auth', config));\r\n\r\n  return result.data;\r\n};\r\n\r\nfunction* login(action) {\r\n  try {\r\n    const result = yield call(loginAPI, action.data);\r\n\r\n    console.log(result);\r\n\r\n    yield put({\r\n      type: LOGIN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n\r\n    yield put({\r\n      type: LOGIN_FAILURE,\r\n      error: err.response,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\nexport default function* auth() {\r\n  yield all([fork(watchLogin)]);\r\n}\r\n","import dotenv from 'dotenv';\r\nimport axios from 'axios';\r\nimport { all, fork } from 'redux-saga/effects';\r\n\r\nimport auth from './auth';\r\n\r\ndotenv.config();\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_BASE_URL;\r\naxios.defaults.withCredentials = true;\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(auth)]);\r\n}\r\n","import { createBrowserHistory } from 'history';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './sagas';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nconst initialState = {};\r\n\r\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\nconst composeEnhancer = process.env.NODE_ENV === 'production' ? compose : devtools || compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [sagaMiddleware, routerMiddleware(history)];\r\n\r\nconst store = createStore(\r\n  rootReducer(history),\r\n  initialState,\r\n  composeEnhancer(applyMiddleware(...middlewares))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React, { memo, useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { LOGIN_REQUEST } from '../redux/types';\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const { isAuth } = useSelector((state) => state.auth);\r\n\r\n  const [userId, setUserId] = useState('');\r\n\r\n  const onChange = useCallback((e) => {\r\n    setUserId(e.target.value);\r\n  }, []);\r\n\r\n  const onClick = useCallback(() => {\r\n    dispatch({\r\n      type: LOGIN_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, [dispatch, userId]);\r\n\r\n  return (\r\n    <Dialog open={!isAuth} maxWidth=\"xs\" fullWidth>\r\n      <DialogTitle disableTypography>\r\n        <Typography variant=\"subtitle2\">발급 받은 아이디를 입력해주세요.</Typography>\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          label=\"ID\"\r\n          size=\"small\"\r\n          fullWidth\r\n          autoFocus\r\n          onChange={onChange}\r\n        />\r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n        <Button color=\"primary\" onClick={onClick}>\r\n          Login\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default memo(Login);\r\n","import React, { memo } from 'react';\r\nimport Login from '../components/Login';\r\n\r\nconst RootRouter = () => {\r\n  return <Login />;\r\n};\r\n\r\nexport default memo(RootRouter);\r\n","import React, { memo } from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport store, { history } from './redux/store';\nimport RootRouter from './routes';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <RootRouter />\n      </ConnectedRouter>\n    </Provider>\n  );\n};\n\nexport default memo(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\n\nimport theme from './config/theme';\nimport App from './App';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root')\n);\n","export const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\n"],"sourceRoot":""}